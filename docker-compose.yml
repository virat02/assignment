version: '3.8'
services:
    redis-http:
      image: redis:latest
      build: 
        context: .
        dockerfile: dockerfile_redis_http
      environment:
        BACKING_REDIS_HOST: ${BACKING_REDIS_HOST_HTTP}
        BACKING_REDIS_PORT: ${BACKING_REDIS_PORT_HTTP}
      container_name: redis-http-container

    redis-tcp:
      image: redis:latest
      build: 
        context: .
        dockerfile: dockerfile_redis_tcp
      environment:
        BACKING_REDIS_HOST: ${BACKING_REDIS_HOST_TCP}
        BACKING_REDIS_PORT: ${BACKING_REDIS_PORT_TCP}
      container_name: redis-tcp-container

    web:
      build:
        context: .
        dockerfile: dockerfile_web
      environment: 
        PROXY_HOST: ${PROXY_HOST_HTTP}
        PROXY_PORT: ${PROXY_PORT_HTTP}
        FLASK_DEBUG: 1
        PYTHONUNBUFFERED: 1
        CACHE_GLOBAL_EXPIRY: ${CACHE_GLOBAL_EXPIRY}
        CACHE_CAPACITY: ${CACHE_CAPACITY}
        BACKING_REDIS_HOST: ${BACKING_REDIS_HOST_HTTP}
        BACKING_REDIS_PORT: ${BACKING_REDIS_PORT_HTTP}
        MAX_CLIENTS: ${MAX_CLIENTS}
        MAX_REQUESTS: ${MAX_REQUESTS}
      ports:
        - "${LOCAL_PORT_HTTP}:${PROXY_PORT_HTTP}"
      restart: always
      container_name: flask-container
    
    tcp_server:
      build:
        context: .
        dockerfile: dockerfile_tcp_server
      command: python ./server.py
      environment:
        PROXY_HOST: ${PROXY_HOST_TCP}
        PROXY_PORT: ${PROXY_PORT_TCP}
        PYTHONUNBUFFERED: 1
        CACHE_GLOBAL_EXPIRY: ${CACHE_GLOBAL_EXPIRY}
        CACHE_CAPACITY: ${CACHE_CAPACITY}
        BACKING_REDIS_HOST: ${BACKING_REDIS_HOST_TCP}
        BACKING_REDIS_PORT: ${BACKING_REDIS_PORT_TCP}
        MAX_CLIENTS: ${MAX_CLIENTS}
        MAX_REQUESTS: ${MAX_REQUESTS}
      ports:
        - "${LOCAL_PORT_TCP}:${PROXY_PORT_TCP}"
      restart: always
      container_name: tcp-server-container